# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifact: 'terraform'
        publishLocation: 'pipeline'
- stage: Dev_PLAN
  jobs:
    - job: Dev_PLAN
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'terraform'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: 'Install Terraform latest'
      - script: |
          pwd
          ls -laR
        displayName: 'Command Line Script'
      - task: TerraformTaskV3@3
        inputs:
          provider: 'aws'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          backendServiceAWS: 'lucidiaitAWS'
          backendAWSBucketName: 'lucidiaterraform'
          backendAWSKey: 'terraform/terraform.tfstate'
      - task: TerraformTaskV3@3
        displayName: 'TerraformWorkspace DEV'
        inputs:
          provider: aws
          command: custom
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          customCommand: workspace
          commandOptions: 'select DEV'
          environmentServiceNameAWS: lucidiaitAWS
          backendServiceAWS: lucidiaitAWS
          backendAWSBucketName: lucidiaterraform
          backendAWSKey: terraform/terraform.tfstate
      - task: TerraformTaskV3@3
        displayName: 'Terraform plan: aws'
        inputs:
          provider: aws
          command: plan
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          environmentServiceNameAWS: lucidiaitAWS
- stage: Deploy_Dev_APPLY
  dependsOn: Dev_PLAN
  jobs:
    - deployment: 'DEV'
      environment: 'DEV'
    - job: Deploy_Dev_APPLY
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'terraform'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: TerraformInstaller@0
        displayName: 'Install Terraform latest'
      - task: TerraformTaskV3@3
        inputs:
          provider: 'aws'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          backendServiceAWS: 'lucidiaitAWS'
          backendAWSBucketName: 'lucidiaterraform'
          backendAWSKey: 'terraform/terraform.tfstate'
      - task: TerraformTaskV3@3
        displayName: 'TerraformWorkspace DEV'
        inputs:
          provider: aws
          command: custom
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          customCommand: workspace
          commandOptions: 'select DEV'
          environmentServiceNameAWS: lucidiaitAWS
          backendServiceAWS: lucidiaitAWS
          backendAWSBucketName: lucidiaterraform
          backendAWSKey: terraform/terraform.tfstate
      - task: TerraformTaskV3@3
        displayName: 'Terraform plan: aws'
        inputs:
          provider: aws
          command: plan
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          environmentServiceNameAWS: lucidiaitAWS
      - task: TerraformTaskV3@3
        displayName: 'Terraform apply: aws'
        inputs:
          provider: aws
          command: apply
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          environmentServiceNameAWS: lucidiaitAWS
- stage: QA_PLAN
  dependsOn: Deploy_Dev_APPLY
  jobs:
    - job: QA_PLAN
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'terraform'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: TerraformInstaller@0
        displayName: 'Install Terraform latest'
      - task: TerraformTaskV3@3
        inputs:
          provider: 'aws'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          backendServiceAWS: 'lucidiaitAWS'
          backendAWSBucketName: 'lucidiaterraform'
          backendAWSKey: 'terraform/terraform.tfstate'
      - task: TerraformTaskV3@3
        displayName: 'TerraformWorkspace QA'
        inputs:
          provider: aws
          command: custom
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          customCommand: workspace
          commandOptions: 'new QA'
          environmentServiceNameAWS: lucidiaitAWS
          backendServiceAWS: lucidiaitAWS
          backendAWSBucketName: lucidiaterraform
          backendAWSKey: terraform/terraform.tfstate
      - task: TerraformTaskV3@3
        displayName: 'Terraform plan: aws'
        inputs:
          provider: aws
          command: plan
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          environmentServiceNameAWS: lucidiaitAWS
- stage: Deploy_QA_APPLY
  dependsOn: QA_PLAN
  jobs:
    - deployment: 'QA'
      environment: 'QA'
    - job: Deploy_QA_APPLY
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'terraform'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: TerraformInstaller@0
        displayName: 'Install Terraform latest'
      - task: TerraformTaskV3@3
        inputs:
          provider: 'aws'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          backendServiceAWS: 'lucidiaitAWS'
          backendAWSBucketName: 'lucidiaterraform'
          backendAWSKey: 'terraform/terraform.tfstate'
      - task: TerraformTaskV3@3
        displayName: 'TerraformWorkspace QA'
        inputs:
          provider: aws
          command: custom
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          customCommand: workspace
          commandOptions: 'select QA'
          environmentServiceNameAWS: lucidiaitAWS
          backendServiceAWS: lucidiaitAWS
          backendAWSBucketName: lucidiaterraform
          backendAWSKey: terraform/terraform.tfstate
      - task: TerraformTaskV3@3
        displayName: 'Terraform plan: aws'
        inputs:
          provider: aws
          command: plan
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          environmentServiceNameAWS: lucidiaitAWS
      - task: TerraformTaskV3@3
        displayName: 'Terraform apply: aws'
        inputs:
          provider: aws
          command: apply
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          environmentServiceNameAWS: lucidiaitAWS
